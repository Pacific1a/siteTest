// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
document.addEventListener('DOMContentLoaded', async function() {
    console.log('=== Auth.js –∑–∞–ø—É—â–µ–Ω [–í–ï–†–°–ò–Ø 4] ===');
    console.log('Toast –¥–æ—Å—Ç—É–ø–µ–Ω?', typeof Toast !== 'undefined' ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
    console.log('API –¥–æ—Å—Ç—É–ø–µ–Ω?', typeof API !== 'undefined' ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!API.isAuthenticated()) {
        const isLoginPage = window.location.pathname.includes('/user/login') || 
                           window.location.pathname.includes('/user/registration') ||
                           window.location.pathname.includes('/user/reset-password');
        
        if (!isLoginPage) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ login');
            window.location.href = '/user/login/index.html';
            return;
        }
        return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = API.getUserFromStorage();
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', user);
    
    if (user) {
        updateUserData(user);
    } else {
        const result = await API.getUserFromServer();
        if (result.success) {
            updateUserData(result.user);
        } else {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
    console.log('üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å...');
    document.addEventListener('click', async function(e) {
        const button = e.target.closest('.sts_ac .ac_btn button');
        if (!button) return;
        
        e.preventDefault();
        console.log('üîò –ö–Ω–æ–ø–∫–∞ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∂–∞—Ç–∞!');
        
        const currentUser = API.getUserFromStorage();
        if (!currentUser) {
            Toast.error('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è
        const loginInputs = document.querySelectorAll('.sts_ac .log_type.logins input');
        const emailInputs = document.querySelectorAll('.sts_ac .log_type.emails input');
        const passInputs = document.querySelectorAll('.sts_ac .log_type.pass input');
        const telegramInputs = document.querySelectorAll('.sts_ac .log_type.telegram input');
        
        console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π - –õ–æ–≥–∏–Ω:', loginInputs.length, 'Email:', emailInputs.length);
        
        if (loginInputs.length !== 2 || emailInputs.length !== 2 || passInputs.length !== 2 || telegramInputs.length !== 1) {
            Toast.error('–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        const newLogin = loginInputs[1].value.trim();
        const newEmail = emailInputs[1].value.trim();
        const oldPassword = passInputs[0].value;
        const newPassword = passInputs[1].value;
        const telegram = telegramInputs[0].value.trim();
        
        console.log('–ó–Ω–∞—á–µ–Ω–∏—è - –õ–æ–≥–∏–Ω:', newLogin, 'Email:', newEmail, 'Telegram:', telegram);
        
        const updates = {};
        if (newLogin && newLogin !== currentUser.login) updates.login = newLogin;
        if (newEmail && newEmail !== currentUser.email) updates.email = newEmail;
        if (telegram && telegram !== currentUser.telegram) updates.telegram = telegram;
        if (oldPassword && newPassword) {
            updates.oldPassword = oldPassword;
            updates.newPassword = newPassword;
        }
        
        console.log('–û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', updates);
        
        if (Object.keys(updates).length === 0) {
            Toast.warning('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }
        
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        const result = await API.updateUser(updates);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        
        if (result.success) {
            Toast.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
            const updatedUser = API.getUserFromStorage();
            updateUserData(updatedUser);
            loginInputs[1].value = '';
            emailInputs[1].value = '';
            passInputs[0].value = '';
            passInputs[1].value = '';
        } else {
            const errorMsg = result.errors ? result.errors.map(e => e.msg).join(', ') : result.message;
            Toast.error('–û—à–∏–±–∫–∞: ' + errorMsg);
        }
    });
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    setupLogout();
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function updateUserData(user) {
    if (!user) {
        console.error('User data is undefined');
        return;
    }
    
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –¥–∞–Ω–Ω—ã–º–∏:', user);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    const balanceElement = document.querySelector('.balance-amount');
    if (balanceElement) {
        const balance = user.balance !== undefined && user.balance !== null ? user.balance : 0;
        balanceElement.textContent = `${balance}‚ÇΩ`;
        console.log('–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', balance);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω" (–ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –≤ log_type.logins)
    const loginInputs = document.querySelectorAll('.sts_ac .log_type.logins input');
    if (loginInputs.length >= 1) {
        loginInputs[0].value = user.login || '';
        console.log('–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', user.login);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π email" (–ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –≤ log_type.emails)
    const emailInputs = document.querySelectorAll('.sts_ac .log_type.emails input');
    if (emailInputs.length >= 1) {
        emailInputs[0].value = user.email || '';
        console.log('–ê–∫—Ç—É–∞–ª—å–Ω—ã–π email —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', user.email);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º Telegram
    const telegramInputs = document.querySelectorAll('.sts_ac .log_type.telegram input');
    if (telegramInputs.length >= 1) {
        telegramInputs[0].value = user.telegram || '';
        console.log('Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', user.telegram);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
function setupLogout() {
    const logoutButtons = document.querySelectorAll('.logout, .exit-account, [data-logout]');
    
    logoutButtons.forEach(button => {
        button.addEventListener('click', function() {
            console.log('–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
            API.logout();
            window.location.href = '/user/login/index.html';
        });
    });
}


