// ============================================
// 2FA Management
// ============================================

let currentSecret = null;

document.addEventListener('DOMContentLoaded', async function() {
    console.log('2FA module loaded');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å 2FA –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
    await check2FAStatusAndUpdateButtons();
    
    // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ 2FA
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            const auth2f = document.querySelector('.auth_2f');
            if (auth2f && auth2f.style.display === 'flex') {
                console.log('2FA modal opened');
                init2FA();
            }
        });
    });
    
    const auth2f = document.querySelector('.auth_2f');
    if (auth2f) {
        observer.observe(auth2f, { attributes: true, attributeFilter: ['style'] });
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"
    const connectBtn = document.querySelector('.auth_2f .button_2f button');
    if (connectBtn) {
        connectBtn.addEventListener('click', handleConnect2FA);
    }
    
    
    // –ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ –∫–æ–¥–∞
    setupCodeInputs();
    
    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞
    setupCopyButton();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 2FA –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function init2FA() {
    console.log('Initializing 2FA...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å 2FA
    const status = await API.check2FAStatus();
    console.log('2FA Status:', status);
    
    if (status.enabled) {
        // 2FA —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        show2FADisableForm();
    } else {
        // 2FA –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç
        const setupResult = await API.setup2FA();
        console.log('Setup result:', setupResult);
        
        if (setupResult.success) {
            currentSecret = setupResult.secret;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º QR –∫–æ–¥
            const qrImg = document.querySelector('.auth_2f .auth_qr img');
            if (qrImg) {
                qrImg.src = setupResult.qrCode;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç
            const secretInput = document.querySelector('.auth_2f .input_code input');
            if (secretInput) {
                secretInput.value = setupResult.secret;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–∫–ª—é—á–µ–Ω–∏—è
            show2FAEnableForm();
        } else {
            Toast.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 2FA: ' + setupResult.message);
        }
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–∫–ª—é—á–µ–Ω–∏—è 2FA
function show2FAEnableForm() {
    const connectBtn = document.querySelector('.auth_2f .button_2f button');
    if (connectBtn) {
        connectBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å';
        connectBtn.onclick = handleConnect2FA;
    }
    
    const infoSpan = document.querySelector('.auth_2f .auth_info span');
    if (infoSpan) {
        infoSpan.textContent = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Authenticator';
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è 2FA
function show2FADisableForm() {
    const connectBtn = document.querySelector('.auth_2f .button_2f button');
    if (connectBtn) {
        connectBtn.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å 2FA';
        connectBtn.onclick = handleDisconnect2FA;
    }
    
    const infoSpan = document.querySelector('.auth_2f .auth_info span');
    if (infoSpan) {
        infoSpan.textContent = '2FA —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è';
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º QR –∏ —Å–µ–∫—Ä–µ—Ç
    const qrDiv = document.querySelector('.auth_2f .auth_qr');
    const inputCodeDiv = document.querySelector('.auth_2f .input_code');
    if (qrDiv) qrDiv.style.display = 'none';
    if (inputCodeDiv) inputCodeDiv.style.display = 'none';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 2FA
async function handleConnect2FA() {
    console.log('Connect 2FA clicked');
    
    if (!currentSecret) {
        Toast.error('–°–µ–∫—Ä–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
        return;
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–¥ –∏–∑ 6 –ø–æ–ª–µ–π
    const codeInputs = document.querySelectorAll('.auth_2f .type_code .code');
    let code = '';
    codeInputs.forEach(input => {
        code += input.value.trim();
    });
    
    console.log('üîë –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:');
    console.log('- Secret:', currentSecret);
    console.log('- Code:', code);
    console.log('- Code length:', code.length);
    
    if (code.length !== 6) {
        Toast.warning('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–¥ (6 —Ü–∏—Ñ—Ä)');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã - —Ü–∏—Ñ—Ä—ã
    if (!/^\d{6}$/.test(code)) {
        Toast.error('–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã');
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
    const result = await API.enable2FA(currentSecret, code);
    console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
    
    if (result.success) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —É—Å–ø–µ—Ö–∞
        showSuccess();
        
        // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        setTimeout(() => {
            hideConditionModals();
            const modal = document.querySelector('.auth_2f');
            if (modal) {
                modal.style.setProperty('display', 'none', 'important');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–û—Ç–∫–ª—é—á–∏—Ç—å 2FA"
            updateButtonsVisibility(true);
        }, 5000);
    } else {
        showError();
        setTimeout(() => {
            hideConditionModals();
        }, 3000);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è 2FA
async function handleDisconnect2FA() {
    console.log('Disconnect 2FA clicked');
    
    // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–¥ –∏–∑ 6 –ø–æ–ª–µ–π
    const codeInputs = document.querySelectorAll('.auth_2f .type_code .code');
    let code = '';
    codeInputs.forEach(input => {
        code += input.value;
    });
    
    if (code.length !== 6) {
        Toast.warning('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (6 —Ü–∏—Ñ—Ä)');
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const result = await API.disable2FA(code);
    console.log('Disable result:', result);
    
    if (result.success) {
        Toast.success('2FA —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        setTimeout(() => {
            const modal = document.querySelector('.auth_2f');
            if (modal) {
                modal.style.setProperty('display', 'none', 'important');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ü–æ–¥–∫–ª—é—á–∏—Ç—å 2FA"
            updateButtonsVisibility(false);
        }, 1000);
    } else {
        showError();
        setTimeout(() => {
            hideConditionModals();
        }, 3000);
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —É—Å–ø–µ—Ö–∞
function showSuccess() {
    const container = document.querySelector('.btn_condition');
    const successDiv = document.querySelector('.btn_condition .succes');
    
    if (container && successDiv) {
        container.style.setProperty('display', 'flex', 'important');
        successDiv.style.setProperty('display', 'flex', 'important');
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –æ—à–∏–±–∫–∏
function showError() {
    const container = document.querySelector('.btn_condition');
    const errorDiv = document.querySelector('.btn_condition .error');
    
    if (container && errorDiv) {
        container.style.setProperty('display', 'flex', 'important');
        errorDiv.style.setProperty('display', 'flex', 'important');
    }
}

// –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function hideConditionModals() {
    const container = document.querySelector('.btn_condition');
    const successDiv = document.querySelector('.btn_condition .succes');
    const errorDiv = document.querySelector('.btn_condition .error');
    
    if (container) container.style.setProperty('display', 'none', 'important');
    if (successDiv) successDiv.style.setProperty('display', 'none', 'important');
    if (errorDiv) errorDiv.style.setProperty('display', 'none', 'important');
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ 2FA
function updateButtonsVisibility(isEnabled) {
    const connectBtn = document.querySelector('.auth_2f .button_2f button');
    
    if (!connectBtn) return;
    
    if (isEnabled) {
        // 2FA –≤–∫–ª—é—á–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª—é—á–∏—Ç—å"
        connectBtn.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å 2FA';
        connectBtn.onclick = handleDisconnect2FA;
    } else {
        // 2FA –≤—ã–∫–ª—é—á–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"
        connectBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å';
        connectBtn.onclick = handleConnect2FA;
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å 2FA –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
async function check2FAStatusAndUpdateButtons() {
    const status = await API.check2FAStatus();
    console.log('2FA Status on load:', status);
    
    if (status.success) {
        updateButtonsVisibility(status.enabled);
    }
}




// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ –∫–æ–¥–∞
function setupCodeInputs() {
    const codeInputs = document.querySelectorAll('.auth_2f .type_code .code');
    
    codeInputs.forEach((input, index) => {
        // –ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
        input.addEventListener('input', function(e) {
            if (this.value.length === 1 && index < codeInputs.length - 1) {
                codeInputs[index + 1].focus();
            }
        });
        
        // Backspace - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª–µ
        input.addEventListener('keydown', function(e) {
            if (e.key === 'Backspace' && this.value.length === 0 && index > 0) {
                codeInputs[index - 1].focus();
            }
        });
        
        // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        input.addEventListener('keypress', function(e) {
            if (!/[0-9]/.test(e.key)) {
                e.preventDefault();
            }
        });
        
        // –í—Å—Ç–∞–≤–∫–∞ –∫–æ–¥–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞
        input.addEventListener('paste', function(e) {
            e.preventDefault();
            const paste = e.clipboardData.getData('text');
            const digits = paste.replace(/\D/g, '').split('').slice(0, 6);
            
            digits.forEach((digit, i) => {
                if (codeInputs[i]) {
                    codeInputs[i].value = digit;
                }
            });
            
            // –§–æ–∫—É—Å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø–æ–ª–µ
            if (digits.length > 0 && codeInputs[Math.min(digits.length - 1, 5)]) {
                codeInputs[Math.min(digits.length - 1, 5)].focus();
            }
        });
    });
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞
function setupCopyButton() {
    const copyBtn = document.querySelector('.auth_2f .svg_copy');
    const secretInput = document.querySelector('.auth_2f .input_code input');
    
    if (copyBtn && secretInput) {
        copyBtn.addEventListener('click', function() {
            secretInput.select();
            document.execCommand('copy');
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            const iconCopy = copyBtn.querySelector('.icon-copy');
            const iconCheck = copyBtn.querySelector('.icon-check');
            
            if (iconCopy && iconCheck) {
                iconCopy.style.display = 'none';
                iconCheck.style.display = 'block';
                
                setTimeout(() => {
                    iconCopy.style.display = 'block';
                    iconCheck.style.display = 'none';
                }, 1500);
            }
            
            Toast.success('–°–µ–∫—Ä–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
        });
    }
}
