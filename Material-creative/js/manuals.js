// ============================================
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–Ω—É–∞–ª–∞–º–∏
// ============================================

// –ò—Å–ø–æ–ª—å–∑—É–µ–º API_BASE_URL –∏–∑ api.js (—É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ)

let allManuals = [];
let currentManualFilter = 'all';

// Telegraph API –∫–æ–Ω—Ñ–∏–≥
const TELEGRAPH_CONFIG = {
    access_token: null, // –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    author_name: 'DUO PARTNERS',
    author_url: 'https://duopartners.com'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–Ω—É–∞–ª–æ–≤
function initManualDeleteButtons() {
    const deleteButtons = document.querySelectorAll('.delete-manual-btn');
    
    deleteButtons.forEach(btn => {
        btn.addEventListener('click', async (e) => {
            e.stopPropagation();
            const id = btn.dataset.id;
            
            if (!id) return;
            
            if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞–Ω—É–∞–ª ID: ${id}?`)) {
                return;
            }
            
            await deleteManual(id);
        });
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–Ω—É–∞–ª–∞
async function deleteManual(id) {
    try {
        const token = API.getToken();
        if (!token) {
            Toast.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            return;
        }
        
        console.log('–£–¥–∞–ª–µ–Ω–∏–µ –º–∞–Ω—É–∞–ª–∞ ID:', id);
        
        const response = await fetch(`${API_BASE_URL}/materials/${id}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            Toast.success('–ú–∞–Ω—É–∞–ª —É–¥–∞–ª–µ–Ω!');
            await loadManuals();
        } else {
            Toast.error(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
        Toast.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–Ω—É–∞–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadManuals() {
    try {
        const response = await fetch(`${API_BASE_URL}/materials/manual`);
        const data = await response.json();
        
        if (data.success) {
            allManuals = data.materials;
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞–Ω—É–∞–ª–æ–≤:', allManuals.length);
            applyManualFilter();
        } else {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω—É–∞–ª–æ–≤');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–Ω—É–∞–ª–æ–≤:', error);
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
function applyManualFilter() {
    let filteredManuals = [...allManuals];
    
    const now = new Date();
    const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    
    if (currentManualFilter === 'new') {
        // –ù–æ–≤—ã–µ –º–∞–Ω—É–∞–ª—ã (—Å–æ–∑–¥–∞–Ω—ã –º–µ–Ω–µ–µ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
        filteredManuals = filteredManuals.filter(manual => {
            const createdAt = new Date(manual.created_at);
            return createdAt >= sevenDaysAgo;
        });
    } else if (currentManualFilter === 'old') {
        // –°—Ç–∞—Ä—ã–µ –º–∞–Ω—É–∞–ª—ã (—Å–æ–∑–¥–∞–Ω—ã –±–æ–ª–µ–µ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
        filteredManuals = filteredManuals.filter(manual => {
            const createdAt = new Date(manual.created_at);
            return createdAt < sevenDaysAgo;
        });
    }
    
    renderManuals(filteredManuals);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∞–Ω—É–∞–ª–æ–≤
function renderManuals(manuals) {
    const container = document.getElementById('manualsContainer');
    if (!container) return;
    
    if (manuals.length === 0) {
        container.innerHTML = '<p style="color: #796161; text-align: center; width: 100%; padding: 40px;">–ú–∞–Ω—É–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>';
        return;
    }
    
    container.innerHTML = manuals.map(manual => createManualCard(manual)).join('');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    initManualDeleteButtons();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    initManualClicks();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞–Ω—É–∞–ª–∞
function createManualCard(manual) {
    const date = new Date(manual.created_at);
    const formattedDate = `${String(date.getDate()).padStart(2, '0')}.${String(date.getMonth() + 1).padStart(2, '0')}.${date.getFullYear()}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    const user = API.getUserFromStorage();
    const isAdmin = user && user.role === 'admin';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ª–∏ –º–∞–Ω—É–∞–ª (–º–µ–Ω–µ–µ 7 –¥–Ω–µ–π)
    const now = new Date();
    const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    const createdAt = new Date(manual.created_at);
    const isNew = createdAt >= sevenDaysAgo;
    
    const imageUrl = manual.preview_image || 'image.png';
    const telegraphUrl = manual.telegraph_url || '#';
    
    return `
        <div class="contents_manuals" data-id="${manual.id}" data-telegraph="${telegraphUrl}" data-date="${manual.created_at}">
            ${isNew ? '<div class="manual_new_title">NEW</div>' : ''}
            <div class="bg_manuals">
                <img src="${imageUrl}" alt="${manual.title}">
            </div>
            <div class="content_manuals">
                <div class="title_card_manuals">
                    <span>${manual.title}</span>
                </div>
                <div class="date_card_manuals">
                    <span>${formattedDate}</span>
                </div>
            </div>
            ${isAdmin ? `
            <button class="delete-manual-btn" data-id="${manual.id}" title="–£–¥–∞–ª–∏—Ç—å –º–∞–Ω—É–∞–ª">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                </svg>
            </button>
            ` : ''}
        </div>
    `;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞–Ω—É–∞–ª–æ–≤
function initManualClicks() {
    const cards = document.querySelectorAll('.contents_manuals');
    
    cards.forEach(card => {
        card.addEventListener('click', (e) => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫ –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            if (e.target.closest('.delete-manual-btn')) {
                return;
            }
            
            const telegraphUrl = card.dataset.telegraph;
            if (telegraphUrl && telegraphUrl !== '#') {
                window.open(telegraphUrl, '_blank');
            }
        });
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ Telegraph
async function createTelegraphArticle(title, content, imageUrl) {
    console.log('üì° createTelegraphArticle –≤—ã–∑–≤–∞–Ω:', { title, content, imageUrl });
    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Telegraph
        const telegraphContent = [
            {
                tag: 'p',
                children: ['–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –º–∞–Ω—É–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:']
            },
            {
                tag: 'p',
                children: [
                    {
                        tag: 'a',
                        attrs: { href: content, target: '_blank' },
                        children: ['–û—Ç–∫—Ä—ã—Ç—å –º–∞–Ω—É–∞–ª']
                    }
                ]
            }
        ];
        
        console.log('üìù –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Telegraph:', telegraphContent);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
        if (imageUrl) {
            telegraphContent.unshift({
                tag: 'figure',
                children: [
                    {
                        tag: 'img',
                        attrs: { src: imageUrl }
                    }
                ]
            });
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ Telegraph API
        console.log('üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegraph API...');
        console.log('üîë –¢–æ–∫–µ–Ω:', TELEGRAPH_CONFIG.access_token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
        
        const requestBody = {
            access_token: TELEGRAPH_CONFIG.access_token || '',
            title: title,
            author_name: TELEGRAPH_CONFIG.author_name,
            author_url: TELEGRAPH_CONFIG.author_url,
            content: telegraphContent,
            return_content: false
        };
        
        console.log('üì§ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', requestBody);
        
        const response = await fetch(`${API_BASE_URL}/telegraph/createPage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });
        
        console.log('üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
        const data = await response.json();
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
        
        if (data.ok) {
            console.log('‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', data.result.url);
            return data.result.url;
        } else {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Telegraph:', data);
            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            if (!TELEGRAPH_CONFIG.access_token) {
                console.log('üîÑ –¢–æ–∫–µ–Ω–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç...');
                await createTelegraphAccount();
                // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏...');
                return createTelegraphArticle(title, content, imageUrl);
            }
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegraph —Å—Ç–∞—Ç—å–∏:', error);
        throw error;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegraph
async function createTelegraphAccount() {
    try {
        console.log('üîë –°–æ–∑–¥–∞–Ω–∏–µ Telegraph –∞–∫–∫–∞—É–Ω—Ç–∞...');
        const response = await fetch(`${API_BASE_URL}/telegraph/createAccount`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                short_name: 'DUO PARTNERS',
                author_name: TELEGRAPH_CONFIG.author_name,
                author_url: TELEGRAPH_CONFIG.author_url
            })
        });
        
        const data = await response.json();
        
        if (data.ok) {
            TELEGRAPH_CONFIG.access_token = data.result.access_token;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
            localStorage.setItem('telegraph_token', data.result.access_token);
            return data.result.access_token;
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ Telegraph');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegraph –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
        throw error;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initTelegraph() {
    const savedToken = localStorage.getItem('telegraph_token');
    if (savedToken) {
        TELEGRAPH_CONFIG.access_token = savedToken;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.ManualsModule = {
    loadManuals,
    createTelegraphArticle,
    setFilter: (filter) => {
        currentManualFilter = filter;
        applyManualFilter();
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraph –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
initTelegraph();

console.log('‚úÖ –ú–æ–¥—É–ª—å –º–∞–Ω—É–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω');
