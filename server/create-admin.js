// –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω-–∞–∫–∫–∞—É–Ω—Ç–æ–≤
const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcryptjs');

const db = new sqlite3.Database('./database.db', (err) => {
    if (err) {
        console.error('Error opening database:', err);
        process.exit(1);
    }
    console.log('Connected to database');
});

// –ê–¥–º–∏–Ω-–∞–∫–∫–∞—É–Ω—Ç—ã —Å –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–º–∏ –ª–æ–≥–∏–Ω–∞–º–∏
const admins = [
    {
        email: 'admin@duopartners.secure',
        login: 'adm_kx9p2w7q4m8n', // –°–ª—É—á–∞–π–Ω—ã–π, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å
        password: 'Admin@DuoP2024!Secure', // –°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å
        telegram: '@admin_duo',
        role: 'admin'
    },
    {
        email: 'superadmin@duopartners.secure',
        login: 'sadm_v5h3t8k2r9x1', // –°–ª—É—á–∞–π–Ω—ã–π
        password: 'SuperAdmin@Duo2024#X', // –°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å
        telegram: '@superadmin_duo',
        role: 'admin'
    }
];

async function createAdmins() {
    console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–∞–∫–∫–∞—É–Ω—Ç–æ–≤...\n');
    
    for (const admin of admins) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
            const existing = await new Promise((resolve, reject) => {
                db.get('SELECT * FROM users WHERE login = ? OR email = ?', 
                    [admin.login, admin.email], (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                });
            });
            
            if (existing) {
                console.log(`‚ö†Ô∏è  –ê–∫–∫–∞—É–Ω—Ç ${admin.login} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                continue;
            }
            
            // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            const hashedPassword = await bcrypt.hash(admin.password, 10);
            
            // –°–æ–∑–¥–∞—ë–º –∞–¥–º–∏–Ω–∞
            await new Promise((resolve, reject) => {
                db.run(
                    'INSERT INTO users (email, login, password, telegram, role, balance) VALUES (?, ?, ?, ?, ?, 0)',
                    [admin.email, admin.login, hashedPassword, admin.telegram, admin.role],
                    function(err) {
                        if (err) reject(err);
                        else resolve(this.lastID);
                    }
                );
            });
            
            console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω:');
            console.log(`   Email: ${admin.email}`);
            console.log(`   –õ–æ–≥–∏–Ω: ${admin.login}`);
            console.log(`   –ü–∞—Ä–æ–ª—å: ${admin.password}`);
            console.log(`   –†–æ–ª—å: ${admin.role}\n`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ${admin.login}:`, error);
        }
    }
    
    console.log('‚úÖ –í—Å–µ –∞–¥–º–∏–Ω—ã —Å–æ–∑–¥–∞–Ω—ã!\n');
    console.log('üìù –°–û–•–†–ê–ù–ò –≠–¢–ò –î–ê–ù–ù–´–ï:');
    console.log('=' .repeat(60));
    admins.forEach((admin, i) => {
        console.log(`\n–ê–¥–º–∏–Ω ${i + 1}:`);
        console.log(`Email: ${admin.email}`);
        console.log(`–õ–æ–≥–∏–Ω: ${admin.login}`);
        console.log(`–ü–∞—Ä–æ–ª—å: ${admin.password}`);
    });
    console.log('\n' + '='.repeat(60));
    
    db.close();
}

createAdmins();
